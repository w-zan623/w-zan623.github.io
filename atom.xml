<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zinW&#39; s thinkload</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zinw623.github.io/"/>
  <updated>2019-08-06T07:49:00.970Z</updated>
  <id>https://zinw623.github.io/</id>
  
  <author>
    <name>zinW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【notes】docker学习笔记-docker容器</title>
    <link href="https://zinw623.github.io/2019/08/06/docker-2/"/>
    <id>https://zinw623.github.io/2019/08/06/docker-2/</id>
    <published>2019-08-06T07:21:42.000Z</published>
    <updated>2019-08-06T07:49:00.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="容器的基本操作"><a href="#容器的基本操作" class="headerlink" title="容器的基本操作"></a>容器的基本操作</h3><p>启动容器</p><ul><li><p>仅一次命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run IMAGE [COMMAND] [ARG]</span><br></pre></td></tr></table></figure></li><li><p>启动交互式容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t IMAGE /bin/bash</span><br></pre></td></tr></table></figure></li></ul><h3 id="守护式容器"><a href="#守护式容器" class="headerlink" title="守护式容器"></a>守护式容器</h3><h3 id="在容器中部署静态网站"><a href="#在容器中部署静态网站" class="headerlink" title="在容器中部署静态网站"></a>在容器中部署静态网站</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;容器的基本操作&quot;&gt;&lt;a href=&quot;#容器的基本操作&quot; class=&quot;headerlink&quot; title=&quot;容器的基本操作&quot;&gt;&lt;/a&gt;容器的基本操作&lt;/h3&gt;&lt;p&gt;启动容器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仅一次命令&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="docker" scheme="https://zinw623.github.io/categories/docker/"/>
    
    
      <category term="笔记" scheme="https://zinw623.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="docker" scheme="https://zinw623.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【notes】docker学习笔记-docker基本组成</title>
    <link href="https://zinw623.github.io/2019/08/06/docker-1/"/>
    <id>https://zinw623.github.io/2019/08/06/docker-1/</id>
    <published>2019-08-06T02:30:45.000Z</published>
    <updated>2019-08-06T07:48:55.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><ul><li>Docker Client 客户端</li><li>Docker Daemon 守护进程</li><li>Docker Image 镜像</li><li>Docker Container 容器</li><li>Docker Registry 仓库</li></ul><h4 id="Docker客户端-守护进程"><a href="#Docker客户端-守护进程" class="headerlink" title="Docker客户端/守护进程"></a>Docker客户端/守护进程</h4><ul><li>C/S架构</li><li>docker客户端对服务器的访问： 本地/远程</li><li>docker客户端向发送给守护进程请求，守护进程的执行结果还会传回给客户端。</li></ul><h4 id="Docker-Image镜像"><a href="#Docker-Image镜像" class="headerlink" title="Docker Image镜像"></a>Docker Image镜像</h4><ul><li>构建和打包阶段。</li><li>容器的基石，相当于保存了容器运行需要的源代码。</li><li>层叠的层叠文件系统。 bootfs（引导文件系统）-&gt; rootfs(Ubuntu) -&gt; add emacs -&gt; add Apache</li><li>联合加载（union mount）:一次加载多个文件系统（add Apache，add emacs），将所有文件系统叠加在一切。镜像可以叠加在一起，位于底部的成为基础镜像（rootfs），add emacs（副镜像）。</li></ul><h4 id="Docker-Container容器"><a href="#Docker-Container容器" class="headerlink" title="Docker Container容器"></a>Docker Container容器</h4><ul><li>通过镜像启动。</li><li>启动执行阶段。</li><li>配置数据和镜像层（bootfs -&gt; ······ -&gt; add emacs) -&gt; 可写层。</li><li>写时复制：docker出现变化时都会应用到可写层，先从只读镜像层复制到可写层然后只读层的文件被隐藏。</li></ul><h4 id="Docker-Registry仓库"><a href="#Docker-Registry仓库" class="headerlink" title="Docker Registry仓库"></a>Docker Registry仓库</h4><ul><li>保存docker镜像。</li><li>分为公有和私有。公有：Docker Hub</li></ul><h4 id="图示结构"><a href="#图示结构" class="headerlink" title="图示结构"></a>图示结构</h4><p>Docker:</p><p><img alt data-src="/uploads/docker/0.PNG"></p><p>Docker Image:</p><p><img alt data-src="/uploads/docker/1.PNG"></p><p>Docker Container:</p><p><img alt data-src="/uploads/docker/2.PNG"></p><h4 id="docker基本指令"><a href="#docker基本指令" class="headerlink" title="docker基本指令"></a>docker基本指令</h4><ul><li><p>查找镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tutorial</span><br></pre></td></tr></table></figure></li><li><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull learn/tutorial</span><br></pre></td></tr></table></figure></li><li><p>启动一个容器，使用echo命令输出hello world</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run learn/tutorial <span class="built_in">echo</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></li><li><p>启动一个容器下载ping</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run learn/tutorial apt-get install -y ping</span><br></pre></td></tr></table></figure></li><li><p>查看有哪些容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure></li><li><p>提交容器，即创建一个新的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [docker ID] learn/ping</span><br></pre></td></tr></table></figure></li><li><p>用新镜像建立一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run learn/ping ping www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>查看容器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [docker ID]</span><br></pre></td></tr></table></figure></li><li><p>查看有哪些镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image</span><br></pre></td></tr></table></figure></li><li><p>将镜像保存到docker hub上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push /learn/ping</span><br></pre></td></tr></table></figure></li></ul><h3 id="Docker容器相关技术简介"><a href="#Docker容器相关技术简介" class="headerlink" title="Docker容器相关技术简介"></a>Docker容器相关技术简介</h3><h4 id="Docker依赖的Linux内核特性"><a href="#Docker依赖的Linux内核特性" class="headerlink" title="Docker依赖的Linux内核特性"></a>Docker依赖的Linux内核特性</h4><ul><li><p>Namespaces 命名空间<br>  提供了系统资源的隔离，for轻量级虚拟化服务<br>  五种命名空间：</p><ul><li>PID 进程隔离</li><li>NET 管理网络接口</li><li>IPC 管理跨进程通信的访问</li><li>MNT 管理挂载点</li><li>UTS 隔离内核和版本标识</li></ul></li><li><p>Control groups 控制组</p><ul><li>资源限制（内存上限等）</li><li>优先级设定（设定哪些进程组使用哪些资源）</li><li>资源计量</li><li>资源控制（挂起恢复）</li></ul></li></ul><h4 id="Docker容器的能力"><a href="#Docker容器的能力" class="headerlink" title="Docker容器的能力"></a>Docker容器的能力</h4><ul><li>文件系统隔离：每个容器都有自己的root文件系统</li><li>进程隔离： 每个容器都运行在自己的进程环境中</li><li>网络隔离： 容器间的虚拟网络接口和IP地址都是分开的</li><li>资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给每个Docker容器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docker的基本组成&quot;&gt;&lt;a href=&quot;#Docker的基本组成&quot; class=&quot;headerlink&quot; title=&quot;Docker的基本组成&quot;&gt;&lt;/a&gt;Docker的基本组成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Docker Client 客户端&lt;/li&gt;
&lt;li&gt;D
      
    
    </summary>
    
      <category term="docker" scheme="https://zinw623.github.io/categories/docker/"/>
    
    
      <category term="笔记" scheme="https://zinw623.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="docker" scheme="https://zinw623.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【notes】Git笔记-1</title>
    <link href="https://zinw623.github.io/2019/08/05/git-1/"/>
    <id>https://zinw623.github.io/2019/08/05/git-1/</id>
    <published>2019-08-05T11:55:41.000Z</published>
    <updated>2019-08-05T12:23:56.140Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h3><ul><li>克隆Git资源作为工作目录。</li><li>在克隆的资源上修改文件。</li><li>如果其他人修改，你也可以修改资源。</li><li>在提交前查看修改。</li><li>提交修改</li><li>提交后后悔的话可以撤回提交，另外可以再做修改。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Git工作流程&quot;&gt;&lt;a href=&quot;#Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git工作流程&quot;&gt;&lt;/a&gt;Git工作流程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;克隆Git资源作为工作目录。&lt;/li&gt;
&lt;li&gt;在克隆的资源上修改文件。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Git" scheme="https://zinw623.github.io/categories/Git/"/>
    
      <category term="笔记" scheme="https://zinw623.github.io/categories/Git/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="https://zinw623.github.io/tags/Git/"/>
    
      <category term="笔记" scheme="https://zinw623.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>用Xshell管理虚拟机Ubuntu</title>
    <link href="https://zinw623.github.io/2019/08/03/xshell-vmware/"/>
    <id>https://zinw623.github.io/2019/08/03/xshell-vmware/</id>
    <published>2019-08-03T14:14:16.000Z</published>
    <updated>2019-08-05T10:31:08.285Z</updated>
    
    <content type="html"><![CDATA[<p>因为使用VM虚拟机太过占用资源，所以我们可以用Xshell连接到虚拟机，来达到节省本机资源的目的。</p><a id="more"></a><ol><li>安装SSH： </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">service iptables stop <span class="comment">#关闭防火墙</span></span><br><span class="line">service ssh start <span class="comment">#开启ssh服务</span></span><br></pre></td></tr></table></figure><ol><li>获得登录需要的ip ,在虚拟机输入：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img width="50%" data-src="/uploads/xshell-vmware/1.PNG"></p><p>ens*后面的inet后面的值就是ip。</p><ol><li><p>按照我之前写过的xshell连接的教程 <a href="/2019/08/01/XshellDownload/">windows系统：Xshell下载安装+连接服务器</a> 建立会话就ok，主机就是刚才你获得的ip，登录用的用户名和密码就是你安装时填的用户名(非root账户)和密码。</p></li><li><p>之后只需要打开虚拟机后最小化界面，从xshell登入就可以了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为使用VM虚拟机太过占用资源，所以我们可以用Xshell连接到虚拟机，来达到节省本机资源的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Xshell" scheme="https://zinw623.github.io/categories/Xshell/"/>
    
    
      <category term="Xshell" scheme="https://zinw623.github.io/tags/Xshell/"/>
    
      <category term="虚拟机" scheme="https://zinw623.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Ubuntu" scheme="https://zinw623.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>【thinkload】统计学习方法-第一章-统计学习方法概论</title>
    <link href="https://zinw623.github.io/2019/08/03/tongjixuexifangfa1/"/>
    <id>https://zinw623.github.io/2019/08/03/tongjixuexifangfa1/</id>
    <published>2019-08-03T10:17:41.000Z</published>
    <updated>2019-08-05T11:51:50.630Z</updated>
    
    <content type="html"><![CDATA[<p>统计学习，学习为核心，统计为方法，学习是根据已有的经验归纳总结出潜在的规律并把所得运用到以后的行为中，</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;统计学习，学习为核心，统计为方法，学习是根据已有的经验归纳总结出潜在的规律并把所得运用到以后的行为中，&lt;/p&gt;
    
    </summary>
    
      <category term="thinkload" scheme="https://zinw623.github.io/categories/thinkload/"/>
    
      <category term="统计学习方法" scheme="https://zinw623.github.io/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="统计学习方法" scheme="https://zinw623.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
      <category term="thinkload" scheme="https://zinw623.github.io/tags/thinkload/"/>
    
  </entry>
  
  <entry>
    <title>我只是一个置顶介绍</title>
    <link href="https://zinw623.github.io/2019/08/03/top/"/>
    <id>https://zinw623.github.io/2019/08/03/top/</id>
    <published>2019-08-03T10:17:41.000Z</published>
    <updated>2019-08-05T11:49:03.887Z</updated>
    
    <content type="html"><![CDATA[<p>thinkload是一个字典里查不到词。</p><blockquote><p>Thinkload, download something from my mind when thinking.</p></blockquote><p>Thinkload系列是我学习时的一些思考。</p><p>Notes系列是学习笔记。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;thinkload是一个字典里查不到词。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thinkload, download something from my mind when thinking.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thinkload系列是我学习时的一些思考。&lt;/p&gt;
&lt;p&gt;Notes系列是学习笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="thinkload" scheme="https://zinw623.github.io/tags/thinkload/"/>
    
  </entry>
  
  <entry>
    <title>photoshop cc 2019安装破解</title>
    <link href="https://zinw623.github.io/2019/08/02/photoshop-cc-2019-download/"/>
    <id>https://zinw623.github.io/2019/08/02/photoshop-cc-2019-download/</id>
    <published>2019-08-02T03:08:27.000Z</published>
    <updated>2019-08-04T03:19:43.371Z</updated>
    
    <content type="html"><![CDATA[<p>Photoshop如今已经非常常用的处理图片的软件，本文就是介绍一下photoshop cc 2019安装破解的完整过程。</p><p>注：本文参考了<a href="http://www.3322.cc/soft/48343.html" target="_blank" rel="noopener">http://www.3322.cc/soft/48343.html</a><br><a id="more"></a></p><h3 id="下载creative-cloud"><a href="#下载creative-cloud" class="headerlink" title="下载creative cloud"></a>下载creative cloud</h3><p>什么是creative cloud？creative cloud相当于adobe系列的一个应用商城，我们可以在里面安装各种adobe系列的软件。<br>下载链接： <a href="https://creativecloud.adobe.com/apps/download/creative-cloud?promoid=KSPDX" target="_blank" rel="noopener">官网链接</a>      <a href="/uploads/downloadPS/Creative_Cloud_Set-Up.exe">其他链接</a>    <a href="https://pan.baidu.com/s/1qr6U3l48Nr-pakBNumR7Tw" target="_blank" rel="noopener">网盘链接</a></p><p>下载完成直接按提示安装，然后注册adobe账号并登陆。</p><h3 id="下载安装photoshop-cc-2019"><a href="#下载安装photoshop-cc-2019" class="headerlink" title="下载安装photoshop-cc-2019"></a>下载安装photoshop-cc-2019</h3><p>默认的下载位置在c盘，如果想改到其他盘可以点击右上角的三个点，出来菜单再点首选项。</p><p><img width="50%" data-src="/uploads/downloadPS/3.PNG"></p><p>然后点击creative Cloud界面，在安装位置条目处更改到你想安装到的位置。</p><p><img width="50%" data-src="/uploads/downloadPS/4.PNG"></p><p>打开creative cloud，找到photoshop的条目点击试用，photoshop自动下载安装成功。</p><p><img width="50%" data-src="/uploads/downloadPS/5.PNG"><br><img width="50%" data-src="/uploads/downloadPS/1.PNG"></p><h3 id="利用补丁破解"><a href="#利用补丁破解" class="headerlink" title="利用补丁破解"></a>利用补丁破解</h3><p>安装完成后安全起见先不要打开ps，我们先下载补丁工具。<br>下载链接：<a href="https://pan.baidu.com/s/1RWVV7HKcgqNU_a6GsLjyDw" target="_blank" rel="noopener">网盘链接</a> <a href="/uploads/downloadPS/PhotoshopCC2019pjbd_48343.zip">其他链接</a></p><p>将压缩包里的adobe.photoshop.cc.2019.20.0.0-patch.exe文件解压到ps安装目录下，就是你刚才修改的安装位置，保证那个位置下有photoshop.exe文件。</p><p>然后点击运行补丁（你可能会听到一段诡异的音乐。。。）。</p><p><img width="50%" data-src="/uploads/downloadPS/6.PNG"></p><p>点击应用，等待出现文件补丁已成功完成的提示。</p><p><img width="50%" data-src="/uploads/downloadPS/7.PNG"></p><p>这样就破解完成了，这时再打开ps发现没有试用还有多少天的提醒了。</p><p><img width="50%" data-src="/uploads/downloadPS/8.PNG"></p><p>按照补丁制作者的建议，在 编辑 ==&gt; 首选项 ==&gt; 常规 ==&gt; 停用”主页”屏幕 打钩。</p><p><img width="50%" data-src="/uploads/downloadPS/9.PNG"></p><p>最后做好重启一下ps再试用。</p><p>注：这篇文章是我安装后就写了，我在安装完的七天后再次检验是否失效，如果失效我会更新补丁，如果补丁失效可以回来看我是否有更新方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Photoshop如今已经非常常用的处理图片的软件，本文就是介绍一下photoshop cc 2019安装破解的完整过程。&lt;/p&gt;
&lt;p&gt;注：本文参考了&lt;a href=&quot;http://www.3322.cc/soft/48343.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.3322.cc/soft/48343.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="photoshop" scheme="https://zinw623.github.io/categories/photoshop/"/>
    
    
      <category term="破解" scheme="https://zinw623.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="photoshop" scheme="https://zinw623.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>Xshell：在本地浏览器使用服务器的jupyter notebook</title>
    <link href="https://zinw623.github.io/2019/08/02/hexo-jupyter/"/>
    <id>https://zinw623.github.io/2019/08/02/hexo-jupyter/</id>
    <published>2019-08-02T01:47:42.000Z</published>
    <updated>2019-08-04T03:19:26.760Z</updated>
    
    <content type="html"><![CDATA[<p>有的服务器里只是命令行，无法可视化，可能就无法使用jupyter notebook。其实需要稍微修改一下连接的属性就能在本地浏览器里打开在服务器里启动的jupyter notebook<a id="more"></a>，具体操作如下：</p><ol><li>首先右击会话管理器里的服务器标签，在菜单点击属性。</li></ol><p><img width="50%" data-src="/uploads/xshellJupyter/1.PNG"></p><ol><li>然后点击左侧的隧道，然后再点击添加。</li></ol><p><img width="50%" data-src="/uploads/xshellJupyter/2.PNG"></p><ol><li>输入两个端口号，我这输入的是jupyter notebook默认的8888端口，然后点确定</li></ol><p><img width="50%" data-src="/uploads/xshellJupyter/3.PNG"></p><ol><li>然后再取消右下方转发X11连接到的选项，然后点确定。</li></ol><p><img width="50%" data-src="/uploads/xshellJupyter/4.PNG"></p><ol><li>之后双击会话管理器里的服务器进行连接，在命令行里输入jupyter notebook，启动后在浏览器里访问<a href="http://localhost:8888/" target="_blank" rel="noopener"></a>就会看到jupyter notebook的界面了。</li></ol><p><img width="50%" data-src="/uploads/xshellJupyter/5.PNG"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的服务器里只是命令行，无法可视化，可能就无法使用jupyter notebook。其实需要稍微修改一下连接的属性就能在本地浏览器里打开在服务器里启动的jupyter notebook
    
    </summary>
    
      <category term="Xshell" scheme="https://zinw623.github.io/categories/Xshell/"/>
    
    
      <category term="Xshell" scheme="https://zinw623.github.io/tags/Xshell/"/>
    
      <category term="jupyter notebook" scheme="https://zinw623.github.io/tags/jupyter-notebook/"/>
    
  </entry>
  
  <entry>
    <title>windows系统：Xshell下载安装+连接服务器</title>
    <link href="https://zinw623.github.io/2019/08/01/XshellDownload/"/>
    <id>https://zinw623.github.io/2019/08/01/XshellDownload/</id>
    <published>2019-08-01T04:32:52.000Z</published>
    <updated>2019-08-04T03:20:07.357Z</updated>
    
    <content type="html"><![CDATA[<p>学习深度学习需要足够的计算资源，往往需要连接远程服务器用来计算。本篇文章就介绍一下如何在windows系统里利用xshell连接服务器。<br><a id="more"></a></p><h3 id="xshell下载安装"><a href="#xshell下载安装" class="headerlink" title="xshell下载安装"></a>xshell下载安装</h3><p>首先要下载安装包:<a href="https://pan.baidu.com/s/1BK70moXvCw5xt3w7pKFH5g" target="_blank" rel="noopener">百度网盘资源</a>。<br>当然也可以去官网下载安装包，选择<a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">家庭学校免费版</a>，下载前要填一下姓名邮箱，提交后你会收到带有下载链接的邮件。</p><p><img width="50%" data-src="/uploads/downloadXshell/1.PNG"></p><p>点击安装包，然后一路默认下一步就ok。如果不想安装在c盘也可以，在其他盘里专门存xshell的各种文件，安装过程中只需把主文件夹换成你刚才的文件夹就ok。</p><p><img width="50%" data-src="/uploads/downloadXshell/2.PNG"></p><p><img width="50%" data-src="/uploads/downloadXshell/3.PNG"></p><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><ol><li><p>打开xshell后，点击左上角的文件然后点新建。</p><p><img width="50%" data-src="/uploads/downloadXshell/4.PNG"></p></li></ol><ol><li><p>然后填入服务器名称、主机、端口号,然后点确定。</p><p><img width="50%" data-src="/uploads/downloadXshell/5.png"></p></li><li><p>双击左侧会话管理器里刚建的服务器，在弹出的窗口里填入登录用的用户名，选上记住用户名。</p><p><img width="50%" data-src="/uploads/downloadXshell/6.PNG"></p></li><li><p>然后输入密码，并选上记住密码。</p><p><img width="50%" data-src="/uploads/downloadXshell/7.PNG"></p></li><li><p>点击确定以后就能在黑色的shell看到已经登录成功的提示了，然后就可以在shell里进行操作了。</p><p><img width="50%" data-src="/uploads/downloadXshell/8.PNG"></p></li><li><p>之后登录只需要双击左侧会话管理器里的对应标签即可。</p><h3 id="上传下载文件"><a href="#上传下载文件" class="headerlink" title="上传下载文件"></a>上传下载文件</h3></li><li><p>在Linux主机上，安装上传下载工具包rz及sz，使用sudo apt install lrzsz  进行安装。</p></li><li>从Windows上传文件，上传命令为rz；输入命令后会弹出选择要上传的本地文件的窗口。</li></ol><p><img width="50%" data-src="/uploads/downloadXshell/9.PNG"></p><ol><li><p>从Linux主机下载文件，下载命令为sz ，后面跟要下载的文件名。例如：</p><p> <code>sz helloworld.py。</code></p></li></ol><p>然后就会弹出选择要保存到本机位置的窗口。</p><p><img width="50%" data-src="/uploads/downloadXshell/10.PNG"></p><p><strong>xshell的基本操作就说这些了，这些的操作已经基本够用了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习深度学习需要足够的计算资源，往往需要连接远程服务器用来计算。本篇文章就介绍一下如何在windows系统里利用xshell连接服务器。&lt;br&gt;
    
    </summary>
    
      <category term="Xshell" scheme="https://zinw623.github.io/categories/Xshell/"/>
    
    
      <category term="Xshell" scheme="https://zinw623.github.io/tags/Xshell/"/>
    
      <category term="linux服务器" scheme="https://zinw623.github.io/tags/linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="windows" scheme="https://zinw623.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>人生</title>
    <link href="https://zinw623.github.io/2019/07/30/myFirstArticle/"/>
    <id>https://zinw623.github.io/2019/07/30/myFirstArticle/</id>
    <published>2019-07-30T03:18:40.000Z</published>
    <updated>2019-08-04T03:19:37.837Z</updated>
    
    <content type="html"><![CDATA[<p>一段旅程从2000年开始……</p><p>到我写这段话已经过了十九年······</p><p><strong>什么样的旅程呢？ 当然是创造的伟大旅程！！！</strong><br><a id="more"></a></p><p>还记得小时候自己喜欢借用自己手边的东西组成各种奇形怪状的玩具、凭着各种感性认识在各种课本上画着各种有趣插画、反复读着被老师夸过的自己认真写过的作文、努力地独立想出解决卷子上颇具难度的问题的方法。。。。。。</p><p>各种自己花时间用心搞过的创造总是能给自己足够的乐趣与成就感，并且这种凝结着努力和价值的东西也诠释着存在的意义。每个人的人生其实都可以通过以时间为索引的一个自己参与过的值得叙述给别人的事件的列表总结，就像这样：</p><p>“老子（老娘）年轻的时候，一个人······，可是到了中年，我来到了······，经历了我这一辈子不会忘记的事······，后来我老了，我打算去······，并且真的这么做了，一直想这样生活到现在······”</p><p>如何总结自己的一生？我想，不论是你拥有多少名利，得过多少荣誉，经历过多少难忘的事，这些可以被看作我们活着我们的行为创造过的各种沧桑岁月啊！我们投入过感情去创造的那些被自己认可的、有资格拿出来吹牛的经历将会成为我们一生的精炼内核。</p><p>所以我想：</p><blockquote><p>我是人，我有自我的意识，我要自由地用自己真实感情驱使着不太完美的躯壳去创造出完美的生命光辉，光辉不必夺目，但我年老回头看时能使我不自主地淡淡微笑，最好是能像夕阳落山前发出的光芒一样，并不强烈刺眼，但非常美丽，也曾与讨厌的黑夜争过地盘，也曾点燃过那无边的海面······</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> people <span class="keyword">import</span> me</span><br><span class="line"></span><br><span class="line">real_lives = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> knowledge <span class="keyword">in</span> [<span class="string">'math'</span>, <span class="string">'deeplearning'</span>, <span class="string">'python'</span>, ...]:</span><br><span class="line"></span><br><span class="line">    me.learn(knowledge)</span><br><span class="line">    real_lives.apend(me.create())</span><br><span class="line"></span><br><span class="line">    me.lives -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>—-感谢阅读—-</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一段旅程从2000年开始……&lt;/p&gt;
&lt;p&gt;到我写这段话已经过了十九年······&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么样的旅程呢？ 当然是创造的伟大旅程！！！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="一段话" scheme="https://zinw623.github.io/categories/%E4%B8%80%E6%AE%B5%E8%AF%9D/"/>
    
    
      <category term="人生" scheme="https://zinw623.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="创造" scheme="https://zinw623.github.io/tags/%E5%88%9B%E9%80%A0/"/>
    
  </entry>
  
</feed>
